#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\options openany
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "ZAP: Z-language Assembly Program"
\pdf_author "Joel M. Berez"
\pdf_keywords "Infocom ZAP Zork IF IntFiction Interactive Fiction"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 0.5cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\listings_params "xleftmargin=0pt"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
ZAP
\end_layout

\begin_layout Subtitle
ZAP: Z-language Assembly Program
\end_layout

\begin_layout Author
Joel M.
 Berez
\end_layout

\begin_layout Publishers
INFOCOM INTERNAL DOCUMENT - NOT FOR DISTRIBUTION
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
ZAP is a two (or three) pass absolute assembler for Z-code.
 The intention is for ZAP to provide relatively low-level support for all
 features available in ZIP (Z-language Interpreter Program).
\end_layout

\begin_layout Standard
A ZAP program consists of a single file containing line-oriented statements.
 A statement may produce code and/or data or may simply direct the assembly
 process.
\end_layout

\begin_layout Standard
During the first pass, the assembler checks statement syntax, calculates
 code/data locations, and attempts to resolve symbolic references.
 During the second pass, code is generated, any error messages are displayed,
 and an optional listing is produced.
 Due to the nature of this two-pass process, certain symbol definition restricti
ons exist that will be explained in the appropriate sections.
\end_layout

\begin_layout Standard
An optional prepass may be invoked to build the frequently used word table
 by omitting the table (
\family typewriter
FWORDS
\family default
) from the input file.
 This is a table of substrings that may be inserted into larger strings
 in an abbreviated form.
 The assembler will identify any such substrings (defined by 
\family typewriter
.FSTR
\family default
) in strings that it assembles and use the proper format.
 This optional prepass will search all regular strings, find 32 good choices
 for substrings, and define them with 
\family typewriter
.FSTR
\family default
s in the 
\family typewriter
FWORDS
\family default
 table.
 See the ZIP manual for further details concerning the string format.
\end_layout

\begin_layout Standard
Code that is generated by the assembler is directly executable by ZIP as
 long as the program follows all necessary conventions for the interpretor.
 ZAP will to a large extent insure that required data structures are defined,
 ZIP pointers are initialized, etc.
 However it cannot be responsible for such implementation dependent restrictions
 as maximum table sizes.
 
\end_layout

\begin_layout Chapter
Language Syntax
\end_layout

\begin_layout Section
Character Set
\end_layout

\begin_layout Standard
Except within strings or comments, only the following characters are allowed
 in a Z program:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

    A-Z           Symbol constituents
\end_layout

\begin_layout Plain Layout

    0-9,-         Symbol or number constituents
\end_layout

\begin_layout Plain Layout

    ?,#,.
         Symbol constituents
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    <space>,<tab> Ignored except as initial operand prefix
\end_layout

\begin_layout Plain Layout

    <cr>,<ff>     Ignored
\end_layout

\begin_layout Plain Layout

    <lf>          End-of-line character
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ,             General operand prefix
\end_layout

\begin_layout Plain Layout

    >             Return value operand prefix
\end_layout

\begin_layout Plain Layout

    /             Branch (on success) operand prefix
\end_layout

\begin_layout Plain Layout

    
\backslash
             Branch (on failure) operand prefix
\end_layout

\begin_layout Plain Layout

    =             Value operand prefix (for assignments)
\end_layout

\begin_layout Plain Layout

    +             Addend operand prefix (addition of constants)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    "             String delimiter
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ;             Comment prefix
\end_layout

\end_inset


\end_layout

\begin_layout Section
Symbols
\end_layout

\begin_layout Standard
Symbols are used to represent values of various types.
 Because the assembler associates a type with each symbol along with its
 value when it is defined, no special method is required to specify the
 type when the symbol is used.
 However, certain naming conventions are suggested for the convenience of
 the programmer.
\end_layout

\begin_layout Standard
A symbol contains any positive number of characters from the set 
\family typewriter
{A-Z,0-9,?,#,.,-}
\family default
.
 By convention pseudo-ops, and only pseudo-ops, begin with a period.
 Other conventions are left to the discretion of the programmer.
\end_layout

\begin_layout Standard
Symbols may be global or local depending upon the type of value that is
 assigned to them.
 The range of a global symbol is the entire program, while the range of
 a local symbol is restricted to the function in which it is defined.
 While local symbols may be reused from one function to another, only constants
 (always global) may be truly redefined.
\end_layout

\begin_layout Standard
The global symbols include two predefined sets.
 Operators are the "hardware" Z-machine instructions and use the same mnemonics
 shown in the ZIP documentation.
 Pseudo-ops are used somewhat like operators, but are simply assembler directive
s that may or may not generate code/data.
 They are explained later in this manual.
\end_layout

\begin_layout Standard
Global labels can refer to either global data or to functions.
 (In fact data, strings and tables, must be defined globally.) These are
 defined either through the colon-colon construct, by a pseudo-op, or by
 assignment to another global label.
 A few special globals are predefined by the assembler (e.g.
\begin_inset space ~
\end_inset


\family typewriter
VOCAB
\family default
 refers to the vocabulary table).
\end_layout

\begin_layout Standard
Constants refer to arbitrary user-specified values.
 These are defined by a direct assignment or by a pseudo-op.
 Unlike other symbols, constants may be redefined at any time.
\end_layout

\begin_layout Standard
Global variables are defined by the 
\family typewriter
.GVAR
\family default
 pseudo-op within the 
\family typewriter
GLOBAL
\family default
 table.
 They may be used interchangeably with local variables, including the special
 
\family typewriter
STACK
\family default
 variable, and represent unique data locations within the program.
\end_layout

\begin_layout Standard
Local symbols come in two varieties.
 Local variables are defined by the 
\family typewriter
.FUNCT
\family default
 pseudo-op, which defines a function and allocates storage for its arguments
 and other local variables.
 These variables are allocated on the stack when the function is called
 and are for each such call assigned the initial values specified.
\end_layout

\begin_layout Standard
Local labels are the targets of branching instructions and are defined by
 the colon construct or by assignment to another local label.
 
\end_layout

\begin_layout Section
Statement Syntax
\end_layout

\begin_layout Standard
A statement consists of the following four fields, all of which are optional:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\family roman
    <label> <operator> <operands> <comment>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A 
\family typewriter
<label>
\family default
 is a single symbol terminated by either one or two colons, depending upon
 whether the symbol is defined to be local or global.
\end_layout

\begin_layout Standard
An 
\family typewriter
<operator>
\family default
 is a pre-defined symbol from either the set of operators or the set of
 pseudo-ops.
 It is terminated by the beginning of another field or by the end-of-line.
\end_layout

\begin_layout Standard
The 
\family typewriter
<operands>
\family default
 field begins with either a space or a tab, unless it is the first field
 on the line.
 It may contain one or more operands.
 Each operand after the first begins with an operand prefix character.
 The operands field may be continued to the next line by putting the prefix
 character on one line and the corresponding operand on the next line.
 Each line may contain a comment.
\end_layout

\begin_layout Standard
The 
\family typewriter
<comment>
\family default
 begins with a semi-colon and ends at the end-of-line.
 It may contain any ASCII characters with the obvious exception of line-feed.
\end_layout

\begin_layout Chapter
Pseudo-ops
\end_layout

\begin_layout Section
Meta-syntax
\end_layout

\begin_layout Standard
Below each of the assembler pseudo-ops is described.
 The syntax to be used is shown first followed by a description.
 A pseudo-op statement consists of the pseudo-op name in the operator field
 followed by zero or more operands.
 A label may or may not be appropriate and a comment is always allowed.
\end_layout

\begin_layout Standard
The meta-syntax used for describing the statement format shows the pseudo-op
 followed by operand types, enclosed in angle brackets.
 Square brackets are used to enclose optional operands.
 Operand types that may be repeated zero or more times are followed by an
 ellipsis and enclosed in braces.
\end_layout

\begin_layout Standard
The following operand types are used: 
\end_layout

\begin_layout Description
<number> An integer between -32768 and 65536.
 Numbers larger than 32767 or smaller than 0 may be interpreted as either
 positive or negative, depending upon the machine instruction.
\end_layout

\begin_layout Description
<constant> A fixed user-defined value.
 May be a 
\family typewriter
<number>
\family default
.
\end_layout

\begin_layout Description
<short
\begin_inset space ~
\end_inset

constant> A 
\family typewriter
<constant>
\family default
 with a non-negative value less than 256.
\end_layout

\begin_layout Description
<long
\begin_inset space ~
\end_inset

constant> A 
\family typewriter
<constant>
\family default
 that is not a 
\family typewriter
<short constant>
\family default
.
\end_layout

\begin_layout Description
<symbol> A symbol as described in section 2.2.
\end_layout

\begin_layout Description
<pointer> A symbol that refers to a disk location, probably defined with
 one of the colon constructs.
\end_layout

\begin_layout Description
<any> Any 
\family typewriter
<symbol>
\family default
 or 
\family typewriter
<number>
\family default
.
\end_layout

\begin_layout Description
<string> Any number of characters of any ASCII value enclosed in double-quotes.
 A double-quote may be included in the string by using two consecutive double-qu
otes.
\end_layout

\begin_layout Description
<short
\begin_inset space ~
\end_inset

string> A 
\family typewriter
<string>
\family default
 not requiring more than 255 words to represent.
\end_layout

\begin_layout Section
Simple Data-generation Pseudo-ops
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.WORD <any>{,<any>...}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates the two-byte value of each 
\family typewriter
<any>
\family default
.
 
\end_layout

\begin_layout Standard
For convenience, if 
\family typewriter
<any>
\family default
 is written by itself, it will be interpreted as 
\family typewriter
.WORD <any>
\family default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.BYTE <short constant>{,<short constant>...}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates the one-byte values.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.TRUE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Equivalent to 
\family typewriter
.WORD 1
\family default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.FALSE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Equivalent to 
\family typewriter
.WORD 0
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
String Handling Pseudo-ops
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.ZWORD <string>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates the four-byte value of 
\family typewriter
<string>
\family default
, left-justified and padded with spaces if necessary.
 
\family typewriter
<string>
\family default
 may not require more than two words.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.STR <string>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates 
\family typewriter
<string>
\family default
 in two-byte words.
 The last word has the end-of-string bit set and, if necessary, is padded
 with shift5 characters.
 For convenience, if 
\family typewriter
<string>
\family default
 is written without an operator, it will be interpreted as 
\family typewriter
.STR <string>
\family default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.FSTR <string>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates a string for the frequently used word table (
\family typewriter
FWORDS
\family default
).
 First does a 
\family typewriter
.STR <string>
\family default
, except that 
\family typewriter
<string>
\family default
 is not searched for fword substrings.
 Then adds the string to the table of fword substrings.
 All 
\family typewriter
.FSTR
\family default
s should be in the 32-word table following 
\family typewriter
FWORDS::
\family default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.LEN <short string>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates a byte containing the number of words required to represent the
 
\family typewriter
<short string>
\family default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.STRL <short string>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Equivalent to:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.LEN <short string>
\end_layout

\begin_layout Plain Layout

.STR <short string>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Assignment Pseudo-ops
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.EQUAL <symbol>,<any>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Assigns to 
\family typewriter
<symbol>
\family default
 the same value and type as 
\family typewriter
<any>
\family default
.
 If any is a 
\family typewriter
<number>
\family default
, the type becomes 
\family typewriter
<constant>
\family default
.
 For convenience, the short form of 
\family typewriter
<symbol>=<any>
\family default
 will also be accepted by the assembler.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.SEQ <symbol>{,<symbol>...}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The symbols are assigned as constants with sequential values beginning with
 zero.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Section
Special Purpose Pseudo-ops
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.TABLE [<number>] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Declares that a table is being generated.
 Optionally specifies the maximum length in bytes.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.PROP <length>,<property> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates a one-byte property header.
 
\family typewriter
<length>
\family default
 is a 
\family typewriter
<constant>
\family default
 between 1 and 8.
 
\family typewriter
<property>
\family default
 is a 
\family typewriter
<constant>
\family default
 between 1 and 31.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.ENDT 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ends generation of the current table.
 If 
\family typewriter
<number>
\family default
 was specified in the 
\family typewriter
.TABLE
\family default
 statement, ensures that not more than 
\family typewriter
<number>
\family default
 bytes have been used.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.OBJECT <symbol>,<number1>,<number2>,<object1>,
\end_layout

\begin_layout Plain Layout

        <object2>,<object3>,<pointer>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates an object with the specified elements.
 
\family typewriter
<symbol>
\family default
 will be the object name and is assigned to the next available object number.
 
\family typewriter
<number1>
\family default
 and 
\family typewriter
<number2>
\family default
 are the flag words.
 
\family typewriter
<object1>
\family default
, 
\family typewriter
<object2>
\family default
, and 
\family typewriter
<object3>
\family default
 are object symbols refering to the 
\family typewriter
<loc>
\family default
, 
\family typewriter
<first>
\family default
, and 
\family typewriter
<next>
\family default
 pointers, respectively.
 
\family typewriter
<pointer>
\family default
 points to the property table.
\end_layout

\begin_layout Standard
Note: all objects must be defined together in the 
\family typewriter
OBJECT
\family default
 table.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.GVAR <symbol>[=<any>] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Defines a new global variable named 
\family typewriter
<symbol>
\family default
 and assigns 
\family typewriter
<any>
\family default
 as the default value.
 
\family typewriter
<any>
\family default
 defaults to zero.
\end_layout

\begin_layout Standard
Note: all global variables must be defined together in the 
\family typewriter
GLOBAL
\family default
 table.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.FUNCT <symbol>{,<symbol>[=<any>]...} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Begins generation of a function and starts a new local symbol block.
 The first symbol is the function name.
 Any other symbols specified become local variables.
 Default values may be given or will default to zero.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Section
Flow Control Pseudo-ops
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.INSERT <string> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Logically inserts the contents of file 
\family typewriter
<string>
\family default
 into the current program at this point.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.ENDI 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ends the current 
\family typewriter
.INSERT
\family default
 file and returns control to the previous input source.
 Everything after this in the file will be ignored.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

.END 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Signifies the end of the program.
 Everything after this in the input source will be ignored.
\end_layout

\begin_layout Chapter
Program Structure
\end_layout

\begin_layout Section
Special Labels
\end_layout

\begin_layout Standard
To satisfy the requirements of ZIP, pointers to certain locations will automatic
ally be assembled into a table at the beginning of the program.
 (See the ZIP manual for the exact format.) To this end, certain symbols
 must be defined by the user as global labels at the appropriate positions
 in the program.
 The following symbols are required:
\end_layout

\begin_layout Description
VOCAB:: Vocabulary table.
\end_layout

\begin_layout Description
OBJECT:: Object table.
\end_layout

\begin_layout Description
GLOBAL:: Global symbol table.
 This table must be the proper length, as specified in the ZIP manual.
\end_layout

\begin_layout Description
FWORDS:: Frequently used word table.
 If omitted, will be automatically generated by the assembler.
\end_layout

\begin_layout Description
PURBOT:: Beginning of pure (read-only) data and code.
\end_layout

\begin_layout Description
ENDLOD:: End of the preloaded data and code.
\end_layout

\begin_layout Description
START:: First instruction to be executed when game is started.
 Must actually point to an instruction, not a function.
 
\end_layout

\begin_layout Section
Program Order
\end_layout

\begin_layout Standard
The program should be arranged in the following order:
\end_layout

\begin_layout Enumerate

\family typewriter
GLOBAL
\family default
, modifiable tables, and other impure data.
\end_layout

\begin_layout Enumerate

\family typewriter
PURBOT::
\end_layout

\begin_layout Enumerate

\family typewriter
VOCAB
\family default
, 
\family typewriter
OBJECT
\family default
, 
\family typewriter
FWORDS
\family default
, and other pure, preloaded tables, strings, and functions.
\end_layout

\begin_layout Enumerate

\family typewriter
ENDLOD::
\end_layout

\begin_layout Enumerate
Non-preloaded tables, strings, and functions.
\end_layout

\begin_layout Enumerate

\family typewriter
.END
\end_layout

\begin_layout Standard

\family typewriter
START::
\family default
 must be specified in front of some instruction.
\end_layout

\end_body
\end_document
